{
  "version": 3,
  "sources": ["../../../app/routes/todoAdd.tsx"],
  "sourcesContent": ["// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app/routes/todoAdd.tsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nvar _s = $RefreshSig$();\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app/routes/todoAdd.tsx\");\n  import.meta.hot.lastModified = \"1709210152347.7925\";\n}\n// REMIX HMR END\n\nimport { redirect } from '@remix-run/node';\nimport { db } from '~/utils/db.server';\nimport { Form, useLoaderData } from '@remix-run/react';\nimport { authenticator } from '~/utils/auth.server';\nexport async function loader({\n  request\n}) {\n  const user = await authenticator.isAuthenticated(request, {\n    failureRedirect: \"/login\"\n  });\n  let data = await db.category.findMany({\n    where: {\n      userId: user.id\n    }\n  });\n  return data;\n}\nexport async function action({\n  request\n}) {\n  const user = await authenticator.isAuthenticated(request, {\n    failureRedirect: \"/login\"\n  });\n  const formData = await request.formData();\n  const title = formData.get('title');\n  const categoryId = formData.get('categoryId');\n  const todo = await db.todo.create({\n    data: {\n      title: title,\n      // categoryId: categoryId,\n      user: {\n        connect: {\n          id: user.id\n        }\n      },\n      category: {\n        connect: {\n          id: categoryId\n        }\n      }\n    }\n  });\n  return redirect(`/todoList`);\n}\nexport default function AddTodo() {\n  _s();\n  const data = useLoaderData();\n  return <>\n            <div className=\"text-5xl font-extrabold text-center\">\n                <span className=\"bg-clip-text text-transparent bg-gradient-to-r from-pink-500 to-violet-500\">\n                    What do you want to do today?\n                </span>\n            </div>\n            <hr />\n            <br />\n            <br />\n            <div className=\"flex justify-center w-full h-80 \">\n                <Form action='' method=\"POST\" className='mt-12 '>\n                    <div className=\"flex items-center justify-around gap-5  \">\n                        <div className=\"title-hd  \">\n                            <h1 className=''>Title:</h1>\n                        </div>\n                        <div>\n                            <input type=\"text\" name='title' className='border-2 bg-grey-300 rounded-full h-12 w-80 pl-4' placeholder='Create New Todo ' required />\n                        </div>\n                    </div>\n                    <br />\n                    <ol className='flex justify-center pl-12 '>\n                        <select name=\"categoryId\" id=\"\" className='w-60 h-10 rounded-full text-center'>\n                            <option value=\"\">Please Select Category</option>\n\n                            {data.map(category => <option value={category.id}>{category.category_Name}</option>)}\n\n                        </select>\n                    </ol>\n                    <div className='flex items-center justify-center mt-12 '>\n                        <button type='submit' className=\"p-1 text-white bg-green-400 rounded-full m-auto w-40 h-12\">Add</button>\n                    </div>\n                </Form>\n            </div>\n        </>;\n}\n_s(AddTodo, \"5thj+e1edPyRpKif1JmVRC6KArE=\", false, function () {\n  return [useLoaderData];\n});\n_c = AddTodo;\nvar _c;\n$RefreshReg$(_c, \"AddTodo\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;AAqBA,kBAAyB;AACzB,gBAAmB;AAEnB,kBAA8B;AA4CrB;AAnET,IAAI,CAAC,OAAO,gBAAgB,CAAC,OAAO,gBAAgB,CAAC,OAAO,kBAAkB;AAC5E,UAAQ,KAAK,kGAAkG;AACjH,OAAO;AACD,mBAAiB,OAAO;AACxB,mBAAiB,OAAO;AAC5B,SAAO,eAAe,CAAC,MAAM,OAAO;AAClC,WAAO,iBAAiB,SAAS,MAAM,6BAA+B,EAAE;AAAA,EAC1E;AACA,SAAO,eAAe,OAAO,iBAAiB;AAChD;AANM;AACA;AAMN,IAAI,KAAK,aAAa;AAEtB,IAAI,aAAa;AACf,cAAY,MAAc;AAAA;AAAA,IAE1B;AAAA,EAAwB;AACxB,cAAY,IAAI,eAAe;AACjC;AA+Ce,SAAR,UAA2B;AAChC,KAAG;AACH,QAAM,OAAO,cAAc;AAC3B,SAAO,sFACG;AAAA,uDAAC,SAAI,WAAU,uCACX,6DAAC,UAAK,WAAU,8EAA6E,6CAA7F;AAAA;AAAA;AAAA;AAAA,WAEA,KAHJ;AAAA;AAAA;AAAA;AAAA,WAIA;AAAA,IACA,mDAAC,UAAD;AAAA;AAAA;AAAA;AAAA,WAAI;AAAA,IACJ,mDAAC,UAAD;AAAA;AAAA;AAAA;AAAA,WAAI;AAAA,IACJ,mDAAC,UAAD;AAAA;AAAA;AAAA;AAAA,WAAI;AAAA,IACJ,mDAAC,SAAI,WAAU,oCACX,6DAAC,QAAK,QAAO,IAAG,QAAO,QAAO,WAAU,UACpC;AAAA,yDAAC,SAAI,WAAU,4CACX;AAAA,2DAAC,SAAI,WAAU,cACX,6DAAC,QAAG,WAAU,IAAG,sBAAjB;AAAA;AAAA;AAAA;AAAA,eAAuB,KAD3B;AAAA;AAAA;AAAA;AAAA,eAEA;AAAA,QACA,mDAAC,SACG,6DAAC,WAAM,MAAK,QAAO,MAAK,SAAQ,WAAU,oDAAmD,aAAY,oBAAmB,UAAQ,QAApI;AAAA;AAAA;AAAA;AAAA,eAAqI,KADzI;AAAA;AAAA;AAAA;AAAA,eAEA;AAAA,WANJ;AAAA;AAAA;AAAA;AAAA,aAOA;AAAA,MACA,mDAAC,UAAD;AAAA;AAAA;AAAA;AAAA,aAAI;AAAA,MACJ,mDAAC,QAAG,WAAU,8BACV,6DAAC,YAAO,MAAK,cAAa,IAAG,IAAG,WAAU,sCACtC;AAAA,2DAAC,YAAO,OAAM,IAAG,sCAAjB;AAAA;AAAA;AAAA;AAAA,eAAuC;AAAA,QAEtC,KAAK,IAAI,cAAY,mDAAC,YAAO,OAAO,SAAS,IAAK,mBAAS,iBAAtC;AAAA;AAAA;AAAA;AAAA,eAAoD,CAAS;AAAA,WAHvF;AAAA;AAAA;AAAA;AAAA,aAKA,KANJ;AAAA;AAAA;AAAA;AAAA,aAOA;AAAA,MACA,mDAAC,SAAI,WAAU,2CACX,6DAAC,YAAO,MAAK,UAAS,WAAU,6DAA4D,mBAA5F;AAAA;AAAA;AAAA;AAAA,aAA+F,KADnG;AAAA;AAAA;AAAA;AAAA,aAEA;AAAA,SApBJ;AAAA;AAAA;AAAA;AAAA,WAqBA,KAtBJ;AAAA;AAAA;AAAA;AAAA,WAuBA;AAAA,OAhCH;AAAA;AAAA;AAAA;AAAA,SAiCD;AACR;AACA,GAAG,SAAS,gCAAgC,OAAO,WAAY;AAC7D,SAAO,CAAC,aAAa;AACvB,CAAC;AACD,KAAK;AACL,IAAI;AACJ,aAAa,IAAI,SAAS;AAE1B,OAAO,eAAe;AACtB,OAAO,eAAe;",
  "names": []
}
